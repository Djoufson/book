@page "/books"
@inject CatalogService CatalogService
@attribute [StreamRendering]

<PageTitle>Booky | Discover</PageTitle>

<div class="page">
    <div class="container">
        @if (IsLoading)
        {
            <Loader />
        }
        else
        {
            <div class="md:flex md:gap-8">
                @* Tags that we can filter on *@
                <div class="md:w-1/4 md:min-w-[300px] md:max-w-[450px]">
                    <TagsHead Tags="@Tags" />
                </div>
                @if(BookList is not null)
                {
                    <div>
                        @if(!string.IsNullOrWhiteSpace(Search))
                        {
                            <p class="text-xl mb-5">Results of search "@Search" | @BookList.Length item(s)</p>
                        }
                        <div class="flex gap-4 flex-wrap">
                            @foreach (var book in BookList)
                            {
                                <BookCard Book="@book" />
                            }
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "tags")]
    public string[]? Tags { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "search")]
    public string? Search { get; set; }
    private BookDto[]? BookList { get; set; }
    private bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        BookList = await CatalogService.GetBooksAsync(Search, Tags ?? []);
        IsLoading = false;
    }
}
